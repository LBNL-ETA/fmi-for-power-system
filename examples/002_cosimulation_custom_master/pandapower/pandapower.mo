model pandapower
  "Block that.simulators a vector of real values with Simulator"
  extends Modelica.Blocks.Interfaces.BlockIcon;
  // Edited by Christoph on 12/06/2018 //	
  parameter Real Tfirstorder(unit="s") = 1 "Time constant of first order transfer function";
  // End //
  
///////////// THE CODE BELOW HAS BEEN AUTOGENERATED //////////////
  Modelica.Blocks.Interfaces.RealInput KW_7(start=0.0, unit="_")
    "_" annotation(Placement(transformation(extent={{-122,68},{-100,90}})));
  Modelica.Blocks.Interfaces.RealInput KVAR_7(start=0.0, unit="_")
    "_" annotation(Placement(transformation(extent={{-122,48},{-100,70}})));
  Modelica.Blocks.Interfaces.RealOutput Vpu_7 (unit="_")
    "_" annotation(Placement(transformation(extent={{100,70},{120,90}})));
  // Edited by Christoph on 12/06/2018 //	
  Modelica.Blocks.Continuous.FirstOrder Vpu_7_transfer (T=Tfirstorder);
    /*"_" annotation(Placement(transformation(extent={{100,70},{120,90}})));*/
  // End //
  Modelica.Blocks.Interfaces.RealOutput Vpu_12 (unit="_")
    "_" annotation(Placement(transformation(extent={{100,52},{120,72}})));
  // Edited by Christoph on 12/06/2018 //	
  Modelica.Blocks.Continuous.FirstOrder Vpu_12_transfer (T=Tfirstorder);
    /*"_" annotation(Placement(transformation(extent={{100,52},{120,72}})));*/
  // End //
  // Configuration specific parameters coming from
  // the inputs of the Python export tool (SimulatorToFMU.py)
  parameter String patResScri = Modelica.Utilities.Files.loadResource("C:\\Users\\cyder\\Desktop\\fmi-for-power-system\\examples\\002_cosimulation_custom_master\\pandapower\\pandapower_wrapper.py")
    "Path to the script in resource folder";
  // used to generate the FMU
  //
  // parameter String _configurationFileName = "dummy.csv"
  //  "Path to the configuration or input file";
  //
   //
  parameter Boolean _saveToFile (fixed=true) = false "Flag for writing results";

protected
  SimulatorToFMU.Python27.Functions.BaseClasses.PythonObject obj=
  SimulatorToFMU.Python27.Functions.BaseClasses.PythonObject(patResScri=patResScri);
  parameter Boolean passMemoryObject = true
    "Set to true if the Python function returns and receives an object, see User's Guide";

   parameter Integer nDblPar=0
    "Number of double parameter values to sent to Simulator";
   parameter Integer nStrPar=0
    "Number of string parameter values to sent to Simulator";
  parameter Integer nDblInp(min=1)=2
    "Number of double input values to sent to Simulator";
  parameter Integer nDblOut(min=1)=2
    "Number of double output values to receive from Simulator";

  Real dblInpVal[nDblInp] "Value to be sent to Simulator";
  // Edited by Christoph on 12/06/2018 //  
  Real dblOutVal[nDblOut] "Value received from the Simulator";
  // End //

  
  Real uR[nDblInp]={
  KW_7,
  KVAR_7
  }"Variables used to collect values to be sent to Simulator";
  
  // Edited by Christoph on 12/06/2018 //
  /*
  
  Real yR[nDblOut]={
  Vpu_7,
  Vpu_12  
  }"Variables used to collect values received from Simulator";
  */
  // End//
  
  
  parameter String dblInpNam[nDblInp]={
  "KW_7",
  "KVAR_7"
  }"Input variable name to be sent to Simulator";
  
  parameter String dblOutNam[nDblOut]={
  "Vpu_7",
  "Vpu_12"
  }"Output variable names to be received from Simulator";
  parameter String dblParNam[nDblPar]
    "Double parameter variable names to be sent to Simulator";
  parameter Real dblParVal[nDblPar]=zeros(nDblPar)
    "Double parameter variable values to be sent to Simulator";

  parameter String strParNam[nStrPar]
    "String parameter variable names to be sent to Simulator";

  parameter String strParVal[nStrPar]
    "String parameter variable values to be sent to Simulator";


///////////// THE CODE ABOVE HAS BEEN AUTOGENERATED //////////////
  protected
    parameter String moduleName="pandapower_wrapper"
      "Name of the Python module that contains the function";
    parameter String functionName="exchange"
      "Name of the Python function";

  equation
	// Compute values that will be sent to Simulator
	for _cnt in 1:nDblInp loop
	  dblInpVal[_cnt] = uR[_cnt];
	end for;

  // Edited by Christoph on 12/06/2018 //
	// Simulator data
	dblOutVal = SimulatorToFMU.Python27.Functions.simulator(
	  moduleName=moduleName,
	  functionName=functionName,
	  //conFilNam=_configurationFileName,
    conFilNam="",
    modTim=time,
    nDblInp=nDblInp,
    dblInpNam=dblInpNam,
    dblInpVal=dblInpVal,
    nDblOut=nDblOut,
    dblOutNam=dblOutNam,
    nDblPar=nDblPar,
    dblParNam=dblParNam,
    dblParVal=dblParVal,
    resWri=_saveToFile,
    obj=obj,
    passMemoryObject=passMemoryObject);
	 
	// Write Outputs
	/*for _cnt in 1:nDblOut loop
	  yR[_cnt] = dblOutVal[_cnt];
	end for;*/
	
	Vpu_7_transfer.u = dblOutVal[1];
	Vpu_12_transfer.u = dblOutVal[2];
	
	connect(Vpu_7_transfer.y, Vpu_7);
	connect(Vpu_12_transfer.y, Vpu_12);
  // End //
end pandapower;